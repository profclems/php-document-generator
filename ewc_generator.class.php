<?php  

/**
 * @category
 * @package PHP Excel, Word and CSV Document Generator
 * @author Clement Sam <clementsam75@gmail.com>
 * @version Release: 1.0.0
 * @link http://github.com/profclems/ewc_generator.php
 */
class EWCGenerator
{
	private $_filename = null;
	private $_file = null;

	private $_options = [
		"file_name" => "default_ewc_generator",
		"extension" => null,
		"hasHTML" => false,
		"title" => [
			'content' => null, //set to pageTitle if you want to use the HTML title content as the document title
			'active' => 'false',
			'align' => 'left',
		],
		"document" => "This is a default document generated by EWC Generator"
	];

	protected $supported_extensions = ['doc','docx','xls','csv']; //This class can only convert to these file types

	private $headerContentType = ['doc' => 'vnd.ms-word','docx' => 'vnd.ms-word', 'xls' => 'vnd.ms-excel', 'xls' => 'vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'csv' => 'csv'];
	
	function __construct()
	{
		# code...
	}

	public function initialize($options)
	{
		$this->_options['file_name'] = $options['file_name'] ?? $this->_options['file_name'];
		$this->_options['extension'] = $options['extension'] ?? $this->_options['extension'];
		$this->_options['hasHTML'] = $options['hasHTML'] ?? $this->_options['hasHTML'];
		$this->_options['document'] = $options['document'] ?? $this->_options['document'];
			
		if (is_array($options['title'] ?? null)) {
			$this->_options['title']['content'] = $options['title']['content'] ?? $this->_options['title']['content'];
			$this->_options['title']['align'] = $options['title']['align'] ?? $this->_options['title']['align'];
			$this->_options['title']['active'] = $options['title']['active'] ?? $this->_options['title']['active'];
		}
		else {
			$this->_options['title']['content'] = $options['title'] ?? $this->_options['title']['content'];
		}

			
	}

	function create($options=null)
	{
		if (!empty($options) && is_array($options)) {

			$this->initialize($options);
			//Check if file extension was specified
			if (empty($this->_options['extension'])) {
				return $this->error("Please specify the type of file to convert to...");
			}

			//Check if file extension is supported
			elseif (!in_array($this->_options['extension'], $this->supported_extensions)) {
				return $this->error("Unsupported file type");
			}
			else {
				//Call the appropriate function if extension is supported
				return $this->{$this->getFunction($this->_options['extension'])}($this->_options['document']);
			}
		}
	}

	public function getFunction($a)
	{
		switch ($a) {
			case 'doc':
				return "Word";
				break;

			case 'docx':
				return "Word";
				break;

			case 'xls':
				return "Excel";
				break;

			case 'csv':
				return "CSV";
				break;
			
			default:
				return "error";
				break;
		}
	}

	public function setFileExtension($ext)
	{
		$this->_options['extension'] = $ext;
	}

	public function setFilename($name)
	{
		$this->_options['file_name'] = $name;
	}

	private function setFileExtensionDefault($ext)
	{
		if (empty($this->_options['extension'])) {
			$this->_options['extension'] = $ext;
		}
	}

	public function Word($document=null)
	{

		if (empty($document)) {
			$document = $this->_options['document'];
		}

		$this->setFileExtensionDefault("doc");
		$this->setHeaders();
		$this->setTitle($document);

		if (file_exists($document)) {

			print(file_get_contents($document));
			
		}
		else {
			print($document);
		}

		return true;
	}

	public function Excel($document=null)
	{
		if (empty($document)) {
			$document = $this->_options['document'];
		}

		$this->setFileExtensionDefault("xls");
		$this->setHeaders();
		$this->setTitle($document);

		if (file_exists($document)) {

			print(file_get_contents($document));
			
		}
		else {
			print($document);
		}

		return true;
	}

	public function CSV(array $dataArray)
	{
		$this->_filename = tempnam(sys_get_temp_dir(), "csv");
		$this->setFileExtensionDefault("csv");
		$this->_file = fopen($this->_filename, 'w');

		//Write Row Namws
		foreach ($dataArray as $line) {
			fputcsv($this->_file, $line);
		}

		fclose($this->_file);

		$this->setHeaders();

		//send file to browser
		readfile($this->_filename);
		unlink($this->_filename);

		return true;
	}

	public function setTitle($document)
	{
		if ($this->_options['hasHTML']) {
			if (($this->_options['title']['content']=="pagetitle")) {
				print("<h1 style='text-align: ".$this->_options['title']['align']."'>".$this->getHTMLTitle($document)."</h1>");
			}
			else {

				print("<h1 style='text-align: ".$this->_options['title']['align']."'>".$this->_options['title']['content']."</h1>");
			}
		}
		else {
			print("<h1 style='text-align: ".$this->_options['title']['align']."'>".$this->_options['title']['content']."</h1>");
		}
	}

	public function getHTMLTitle($link)
	{
		$html = file_get_contents($link);

		if (!$html) 
			return null;

		$res = preg_match("/<title>(.*)<\/title>/siU", $html, $title_matches);

		if (!$res) 
			return null;

		$title = preg_replace('/\s+/', ' ', $title_matches[1]);
		$title = trim($title);
		return $title;
	}

	public function getFileExtension($file)
	{
		return strtolower(pathinfo($file)['extension']);
	}

	public function setHeaders()
	{
		header("Cache-Control: no-cache, must-revalidate");
		header("Expires: Sat, 26 Jul 1997 05:00:00 GMT");
		header("Content-Type: application/".$this->headerContentType[$this->_options['extension']]);
		header("Content-Disposition: attachment;Filename=".$this->_options['file_name'].".".$this->_options['extension']);
		header("Content-Type: text/html; charset=Windows-1252");
	}

	public function error($err = "An error ocurred.")
	{
		return $err;
	}
}

?>